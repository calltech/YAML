apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: example-ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: example-ingress-ip
spec:
  backend:
    serviceName: example-site
    servicePort: 8080
  rules:
  - http:
      paths:
      - path: /graphql
        backend:
          serviceName: example-api-svc
          servicePort: 8080
      - path: /*
        backend:
          serviceName: example-site-svc
          servicePort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: postgres
spec:
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - image: "postgres:10.1"
        name: postgres
        envFrom:
        - configMapRef:
            name: example-config
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        gcePersistentDisk:
          fsType: ext4
          pdName: postgres-disk
---
apiVersion: v1
kind: Service
metadata:
  name: example-api-svc
  labels:
    app: example-api
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 30050
  selector:
    app: example-api
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: example-api
spec:
  replicas: 1
  template: 
    metadata: 
      labels:
        app: example-api
    spec:
      containers:
      - name: example-api
        image: gcr.io/YOUR_PROJECT_ID/example:b8886066cfa761cf858ce526b71513abbe1ac7c0
        command: ["/example", "serve", "--schema=schema.graphql"]
        envFrom:
        - configMapRef:
            name: example-config
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: example-site-svc
  labels:
    app: example-site
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 30051
  selector:
    app: example-site
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: example-site
spec:
  replicas: 1
  template: 
    metadata: 
      labels:
        app: example-site
    spec:
      containers:
      - name: example-site
        image: gcr.io/YOUR_PROJECT_ID/example:b8886066cfa761cf858ce526b71513abbe1ac7c0
        command: ["/example", "site"]
        envFrom:
        - configMapRef:
            name: example-config
        ports:
        - containerPort: 8080
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: crawler
spec:
  schedule: "@hourly"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: crawler
            image: gcr.io/YOUR_PROJECT_ID/example:b8886066cfa761cf858ce526b71513abbe1ac7c0
            command: ["/example", "crawl"]
            envFrom:
            - configMapRef:
                name: example-config
          restartPolicy: Never
---